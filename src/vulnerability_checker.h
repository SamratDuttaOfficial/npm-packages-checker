#ifndef VULNERABILITY_CHECKER_H
#define VULNERABILITY_CHECKER_H

#include "common.h"

typedef struct {
    char package_name[MAX_PACKAGE_NAME_LEN];
    char vulnerable_package_name[MAX_PACKAGE_NAME_LEN]; // Original vulnerable package name from CSV
    char vulnerable_version[MAX_VERSION_LEN];
    char used_version[MAX_VERSION_LEN];
    char dependency_path[MAX_DEPENDENCY_PATH];
    int is_direct_dependency;
    int match_type; // 0=exact, 1=partial
} VulnerabilityMatch;

typedef struct {
    VulnerabilityMatch matches[MAX_PACKAGES];
    VulnerabilityMatch warnings[MAX_PACKAGES];
    int count;
    int warning_count;
} VulnerabilityResults;

int check_vulnerabilities(const PackageList *vulnerable_packages,
                         const DependencyTree *dependencies,
                         VulnerabilityResults *results);

int is_version_vulnerable(const Package *vuln_pkg, const char *used_version);
int is_partial_match(const char *vuln_name, const char *dep_name);

#endif